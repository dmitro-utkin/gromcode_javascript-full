/*
Способи передачі дати:
- const today = new Date(); - создає об'єкт Date в нинішній момент часу
- const date1 = new Date('December 17, 1995 03:24:00'); - можна вказати строку з указаной датой та часом
- const date2 = new Date(949363322003) - це число, це кількість мілісекунд 
  які відраховуються від дати 
  (Thu Jan 01 1970 03:00:00 GMT+0300 (Восточная Европа, стандартное время))
  (Time Stand);
  Текущий Time Stand - Date.now() - 1710412882485;
  new Date(1900, 2).getTime(); - -2203898524000 (Від'ємний Time Stand від дати Thu Jan 01 1970 03:00:00 GMT+0300)
- const date3 = new Date(1995, 11, 17, 3, 24, 0); // обов'язкові два перших аргумента
*/

/*
(console)
typeof new Date(); - 'object'
const t = new Date();
t;
Thu Mar 14 2024 12:48:22 GMT+0200 (Восточная Европа, стандартное время)
t.getTimezoneOffset() - метод для отримання часу по Грінвічу
-120

t.getDay();
4 - четвер

індекси місяців від 0 до 11
*/

/*
Робота с компонентами дати:
new Date(year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]]);
.getFullYear()      .setFullYear        .getUTCFullYear()        .setUTCFullYear()
.getMonth()         .setMonth()         .getUTCMonth()           .setUTCMonth()
.getDate()          .setDate()          .getUTCDate()            .setUTCDate()
.getHours()         .setHours()         .getUTCHours()           .setUTCHours()
.getMinutes()       .setMinutes()       .getUTCMinutes()         .setUTCMinutes()
.getSeconds()       .setSeconds()       .getUTCSeconds()         .setUTCSeconds()
.getMiliSeconds()   .setMiliSeconds()   .getUTCMiliSeconds()     .setUTCMiliSeconds()
*/

// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// ---------------- Task 1 --------------------------
// --------------------------------------------------
// --------------------------------------------------
/*
Установка компонентов даты
Напишите функцию, которая выведет день недели через n дней после указанной даты.
Основные требования:
Функция должна экспортироваться под именем dayOfWeek
Сигнатура: dayOfWeek(date, days), где date - объект даты, days - целое число дней.
Функция должна вернуть строку вида 'Mo', 'Tu', 'We', 'Th', 'Fr', 'St', 'Su'
Считаем что неделя стартует с воскресенья
Входящая дата должна остаться неизменной
*/
const weekDays = ["Su", "Mo", "Tu", "We", "Th", "Fr", "St"];

const dayOfWeek = (date, days) => {
  const day = new Date(date).getDate();
  const dateInFuture = new Date(date).setDate(day + days);

  return weekDays[new Date(dateInFuture).getDay()];
};

const result = dayOfWeek(new Date(2025, 0, 1), 14);

console.log(result);

// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// ---------------- Task 2 --------------------------
// --------------------------------------------------
// --------------------------------------------------
/*
Время в Гринвиче
Напишите функцию, которая вернет время в Гринвиче
Основные требования:
Функция должна экспортироваться под именем getGreenwichTime
Сигнатура: getGreenwichTime(date), где date - объект даты.
Функция должна вернуть время в формате '06:43'
Входящая дата должна остаться неизменной
*/
// Function to get the Greenwich time from the specified date
export const getGreenwichTime = (date) => {
  const formatter = new Intl.DateTimeFormat("en", {
    hour: "2-digit",
    minute: "2-digit",
    hour12: false,
    timeZone: "UTC", // Set the time zone to UTC for Greenwich time
  });
  return formatter.format(date);
};

// Example usage:
const inputDate = new Date(); // Example date
const greenwichTime = getGreenwichTime(inputDate);
console.log(greenwichTime); // Output: '06:43' (sample time)

// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// ---------------- Task 3 --------------------------
// --------------------------------------------------
// --------------------------------------------------
/*
Разница дат
Напишите функцию, которая посчитает разницу между двумя датами
Основные требования:
Функция должна экспортироваться под именем getDiff
Сигнатура: getDiff(startDate, endDate), где startDate, endDate - объекты даты.
Функция должна вернуть разницу в формате 275d 2h 58m 16s
Входящие даты должны остаться неизменными
Функция должна искать разницу, не зависимо от того, какая дата из переданных меньше
*/
// Function to calculate the difference between two dates
const getDiff = (startDate, endDate) => {
  const diffInMs = Math.abs(startDate - endDate);
  const days = Math.floor(diffInMs / (1000 * 60 * 60 * 24));
  const hours = Math.floor(
    (diffInMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)
  );
  const minutes = Math.floor((diffInMs % (1000 * 60 * 60)) / (1000 * 60));
  const seconds = Math.floor((diffInMs % (1000 * 60)) / 1000);

  return `${days}d ${hours}h ${minutes}m ${seconds}s`;
};

// Example usage:
const startDateTime = new Date("2024-03-14T09:00:00");
const endDateTime = new Date("2024-03-20T18:30:45");
const timeDifference = getDiff(startDateTime, endDateTime);
console.log(timeDifference); // Sample output: '6d 9h 30m 45s'
/*
Функція getDiff приймає два параметри - startDate (початкова дата) і endDate (кінцева дата).
Розраховується різниця між цими двома датами в мілісекундах і зберігається в змінній diffInMs.
За допомогою математичних операцій визначається кількість днів, годин, хвилин і секунд у цій різниці.
Результат обчислень формується у вигляді рядка, де видно кількість днів, годин, хвилин і секунд між двома датами.
Остаточний рядок з різницею часу повертається як результат роботи функції.
Приклад використання показує, як можна передати дати у функцію та вивести результат у форматі "6d 9h 30m 45s", що відображає загальну різницю між двома датами у днях, годинах, хвилинах і секундах.
*/

// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// ---------------- Task 4 --------------------------
// ----------- (additional tasks) -------------------
// --------------------------------------------------
// --------------------------------------------------
/*
Дни рождения студентов
Напишите функцию, которая сгруппирует студентов по дню рождения
Основные требования:
Функция должна экспортироваться под именем studentsBirthDays
Сигнатура: studentsBirthDays(students) => { Jan: ['Tom', 'Ben'], Mar: ['Sam'] }, 
  где students - массив вида [{ name: 'Tom', birthDate: '01/15/2010' }, { name: 'Ben', birthDate: '01/17/2008' }, { name: 'Sam', birthDate: '03/15/2010' }]
Внутри каждого месяца студенты должны быть отсортированы по дате (день месяца по счету)
Входящий массив должен остаться неизменным
*/


























// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
// ---------------- Task 5 --------------------------
// ----------- (additional tasks) -------------------
// ------- Todo List - сортировка задач -------------
// --------------------------------------------------
// --------------------------------------------------
// --------------------------------------------------
/*
Todo List - сортировка задач
Добавьте возможность сортировки задач в Todo List
Hачальный код:
  const listElem = document.querySelector('.list');

const tasks = [
  { text: 'Buy milk', done: false, id: '1' },
  { text: 'Pick up Tom from airport', done: false, id: '2' },
  { text: 'Visit party', done: false, id: '3' },
  { text: 'Visit doctor', done: true, id: '4' },
  { text: 'Buy meat', done: true, id: '5' },
];

const renderTasks = tasksList => {
  listElem.innerHTML = '';
  const tasksElems = tasksList
    .slice()
    .sort((a, b) => a.done - b.done)
    .map(({ text, done, id }) => {
      const listItemElem = document.createElement('li');
      listItemElem.classList.add('list__item');
      const checkbox = document.createElement('input');
      checkbox.setAttribute('type', 'checkbox');
      checkbox.setAttribute('data-id', id);
      checkbox.checked = done;
      checkbox.classList.add('list__item-checkbox');
      if (done) {
        listItemElem.classList.add('list__item_done');
      }
      listItemElem.append(checkbox, text);

      return listItemElem;
    });

  listElem.append(...tasksElems);
};

renderTasks(tasks);

const onToggleTask = e => {
  const isCheckbox = e.target.classList.contains('list__item-checkbox');

  if (!isCheckbox) {
    return;
  }

  const taskData = tasks.find(task => task.id === e.target.dataset.id);
  Object.assign(taskData, { done: e.target.checked });
  renderTasks(tasks);
};

listElem.addEventListener('click', onToggleTask);

const onCreateTask = () => {
  const taskTitleInputElem = document.querySelector('.task-input');

  const text = taskTitleInputElem.value;

  if (!text) {
    return;
  }
  taskTitleInputElem.value = '';

  tasks.push({
    text,
    done: false,
    id: Math.random().toString(),
  });
  renderTasks(tasks);
};

const createBtnElem = document.querySelector('.create-task-btn');
createBtnElem.addEventListener('click', onCreateTask);
Выполненные задачи должны быть внизу, активные вверху
Выполненные задачи должны сортироваться по дате выполнения 
  (только что завершенная задача должна быть вверху среди выполненных)
Не выполненные (активные) задачи должны сортироваться по дате добавления 
  (самые новые вверху среди не выполненных)
Для реализации задачи метод sort нужно использовать один раз (!)
*/